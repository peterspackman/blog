(()=>{var e={5051:(e,t,s)=>{"use strict";e.exports=s.p+"9fa85ed00b68a123.js"},6206:(e,t,s)=>{"use strict";e.exports=s.p+"e787fb8b01b19848.wasm"}},t={};function s(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,s),n.exports}s.m=e,s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.p="/",s.gca=function(e){return e={}[e]||e,s.p+s.u(e)},s.b=self.location+"/../../../";let a=null,i=!1,n=!1,o=!1;const r="/sim";async function l(){if(!i&&!n){n=!0;try{postMessage({type:"stdout",data:"Loading LAMMPS WebAssembly script..."}),importScripts(new URL(s(5051),s.b).href),postMessage({type:"stdout",data:"LAMMPS script loaded, waiting for runtime initialization..."})}catch(e){n=!1,postMessage({type:"error",data:`Failed to load LAMMPS script: ${e.message}`})}}}function c(e){try{return a.FS.stat(e),!0}catch{return!1}}function d(e){return`${r}/${e}`}function p(){if(!i||!a)throw new Error("LAMMPS worker not initialized")}self.Module={print:e=>postMessage({type:"stdout",data:e}),printErr:e=>postMessage({type:"stderr",data:e}),locateFile:(e,t)=>"lmp.wasm"===e?new URL(s(6206),s.b).href:t+e,onRuntimeInitialized:()=>{postMessage({type:"stdout",data:"LAMMPS runtime initialized"}),a=self.Module,function(){try{(function(e){try{return 16384==(61440&a.FS.stat(e).mode)}catch{return!1}})(r)||a.FS.mkdir(r),i=!0,n=!1,postMessage({type:"stdout",data:`Simulation directory '${r}' ready`}),postMessage({type:"ready",data:"LAMMPS worker ready"})}catch(e){n=!1,postMessage({type:"error",data:`Failed to initialize file system: ${e.message}`})}}()},onAbort:e=>{n=!1,postMessage({type:"error",data:`LAMMPS WebAssembly aborted: ${e}`})},INITIAL_MEMORY:268435456,MAXIMUM_MEMORY:2147483648,ALLOW_MEMORY_GROWTH:!0,NO_EXIT_RUNTIME:!0,FORCE_FILESYSTEM:!0};const f={"upload-file":async function(e,t){p();const{name:s,content:i}=e,n=d(s);try{const e=i instanceof Uint8Array?i:new Uint8Array(i);a.FS.writeFile(n,e),postMessage({type:"file-uploaded",data:{filename:s,size:e.length,path:n},id:t})}catch(o){throw new Error(`Failed to upload ${s}: ${o.message}`)}},"upload-files":async function(e,t){p();const s=[];for(const n of e)try{const{name:e,content:t}=n,i=d(e),o=t instanceof Uint8Array?t:new Uint8Array(t);a.FS.writeFile(i,o),s.push({filename:e,size:o.length,path:i,status:"uploaded"})}catch(i){s.push({filename:n.name,status:"error",error:i.message})}postMessage({type:"files-uploaded",data:s,id:t})},"run-lammps":async function(e,t){if(p(),o)throw new Error("LAMMPS simulation already running. Cancel current run first.");const{inputContent:s,inputFile:i}=e;let n=i;try{if(o=!0,postMessage({type:"stdout",data:"=== Starting LAMMPS Simulation ==="}),s){n=n||"input.lmp";const e=d(n);a.FS.writeFile(e,s),postMessage({type:"stdout",data:`Input script written to ${n}`})}if(!n)throw new Error("No input file specified and no input content provided");if(!c(d(n)))throw new Error(`Input file ${n} not found in simulation directory`);a.FS.chdir(r),postMessage({type:"stdout",data:`> lmp -in ${n}`});const e=["-in",n],i=a.callMain?a.callMain(e):0;o=!1,postMessage({type:"completed",data:{exitCode:i,message:`Simulation completed with exit code: ${i}`,inputFile:n},id:t})}catch(l){throw o=!1,new Error(`LAMMPS execution failed: ${l.message}`)}},"delete-file":async function(e,t){p();const{filename:s}=e,i=d(s);try{c(i)?(a.FS.unlink(i),postMessage({type:"file-deleted",data:{filename:s,path:i},id:t})):postMessage({type:"file-not-found",data:{filename:s,message:`File ${s} not found`},id:t})}catch(n){throw new Error(`Failed to delete ${s}: ${n.message}`)}},"delete-files":async function(e,t){p();const{filenames:s}=e,i=[];for(const o of s)try{const e=d(o);c(e)?(a.FS.unlink(e),i.push({filename:o,status:"deleted"})):i.push({filename:o,status:"not-found"})}catch(n){i.push({filename:o,status:"error",error:n.message})}postMessage({type:"files-deleted",data:i,id:t})},"get-file":async function(e,t){p();const{filename:s}=e,i=d(s);try{if(!c(i))throw new Error(`File ${s} not found`);const e=a.FS.readFile(i);postMessage({type:"file-content",data:{filename:s,content:e,size:e.length},id:t})}catch(n){throw new Error(`Failed to read ${s}: ${n.message}`)}},"list-files":async function(e,t){p();try{const e=a.FS.readdir(r).filter(e=>"."!==e&&".."!==e).map(e=>{const t=d(e),s=a.FS.stat(t),i=16384==(61440&s.mode);return{name:e,size:s.size,isDirectory:i,path:t}});postMessage({type:"file-list",data:e,id:t})}catch(s){throw new Error(`Failed to list files: ${s.message}`)}},"clear-files":async function(e,t){p();try{const e=a.FS.readdir(r).filter(e=>"."!==e&&".."!==e);let i=0;const n=[];for(const t of e)try{const e=d(t);a.FS.unlink(e),i++}catch(s){n.push({filename:t,error:s.message})}postMessage({type:"files-cleared",data:{deletedCount:i,errors:n,message:`Cleared ${i} files from simulation directory`},id:t})}catch(s){throw new Error(`Failed to clear files: ${s.message}`)}},"get-file-info":async function(e,t){p();const{filename:s}=e,i=d(s);try{if(!c(i))throw new Error(`File ${s} not found`);const e=a.FS.stat(i);postMessage({type:"file-info",data:{filename:s,size:e.size,isDirectory:e.isDirectory(),path:i},id:t})}catch(n){throw new Error(`Failed to get info for ${s}: ${n.message}`)}}};self.onmessage=async function(e){const{type:t,data:s,id:a}=e.data;try{if("init"===t)return void await l();const e=f[t];if(!e)throw new Error(`Unknown message type: ${t}`);await e(s,a)}catch(i){postMessage({type:"error",data:i.message,id:a})}},l().catch(e=>{postMessage({type:"error",data:`Worker initialization failed: ${e.message}`})})})();